<#@ template language="C#" debug="true" hostspecific="true" #>
<#@ output extension=".cpp" encoding="utf-8" #>
<#
	CPlusPlusGenerator generator = (CPlusPlusGenerator) Host.GetHostOption("Generator");
	InterfaceModel model = (InterfaceModel) Host.GetHostOption("CurrentInterface");
	string className = model.Name + "Base";
#>

#include "TalonPrefix.h"
#include <Talon/<#= model.Module #>/Base/<#= className #>.h>
<#
	foreach (var type in model.GetReferencedTypes())
	{
		if (TypeRegistry.IsValueType(type.UnderlyingType))
			continue;

		InterfaceModel includedType = type.Interface;
		if (includedType == null)
			continue;
#>
#include <Talon/<#= includedType.Module #>/<#= includedType.Name #>.h>
<#
	}
#>

namespace Talon
{
<#
	foreach (MethodModel method in model.Constructors)
	{
#>
// TODO: Code generation should mark unused parameters as such.
#pragma warning(push)
#pragma warning(disable : 4100)
	<#= className #>::<#= className #>(<# method.GenerateParameterList(this, t => t.FieldType); #>)
<#
		int i = 0;
		foreach (FieldModel field in model.Fields)
		{
			ParameterModel parameter = method.GetParameter(field.Name);
			char separator = ',';
			if (i == 0)
				separator = ':';

			if (parameter == null)
			{
#>
		<#= separator #> <#= generator.GetFieldName(field) #>(<#= field.Type.DefaultValue #>)
<#
			}
			else
			{
#>
		<#= separator #> <#= generator.GetFieldName(field) #>(<#= parameter.Name #>)
<#
			}
			++i;
		}
#>
	{
	}
#pragma warning(pop)
<#
	}

	if (model.Constructors.Count == 0)
	{
#>
	<#= className #>::<#= className #>()
	{
	}

<#	} #>
	<#= className #>::~<#= className #>()
	{
	}

<#
	foreach (PropertyModel property in model.Properties)
	{
#>
	<#= property.Type.ParameterType #> <#= className #>::<#= generator.GetGetterName(property) #>() const
	{
		return m_<#= Char.ToLowerInvariant(property.Name[0]) + property.Name.Substring(1) #>;
	}


	void <#= className #>::<#= generator.GetSetterName(property) #>(<#= property.Type.ParameterType #> value)
	{
		m_<#= Char.ToLowerInvariant(property.Name[0]) + property.Name.Substring(1) #> = value;
	}

<#
	}

	foreach (MethodModel method in model.Methods)
	{
#>
	<#= method.ReturnType.ParameterType #> <#= className #>::<#= method.Name #>(<# method.GenerateParameterList(this, ParameterListOptions.IncludeTypes); #>)
	{
	}

<#
	}

	foreach (MethodModel method in model.Delegates)
	{
#>
	<#= method.ReturnType.ParameterType #> <#= className #>::On<#= method.Name #>(<# method.GenerateParameterList(this); #>)
	{
		<#= method.Name #>(<# method.GenerateParameterList(this, options:ParameterListOptions.IncludeNames); #>);
	}

<#
	}
#>
}