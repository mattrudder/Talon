<#@ template language="C#" debug="true" hostspecific="true" #>
<#@ output extension=".h" encoding="utf-8" #>
<#
	CPlusPlusGenerator generator = (CPlusPlusGenerator) Host.GetHostOption("Generator");
	InterfaceModel model = (InterfaceModel) Host.GetHostOption("CurrentInterface");
	string className = model.Name + "Base";
#>

#pragma once

#include <Talon/TalonPublic.h>
<# if (model.Delegates.Count > 0) { #>
#include <Talon/TalonDelegate.h>
<# } #>

namespace Talon
{
<#
	foreach (TypeModel type in model.GetReferencedTypes())
	{
		if (TypeRegistry.IsValueType(type.UnderlyingType))
			continue;
#>
	class <#= type.UnderlyingType #>;
<#
	}
#>

	class TalonApi <#= className #>
	{
	public:
<#
	foreach (MethodModel method in model.Constructors)
	{
#>
		<#= className #>(<# method.GenerateParameterList(this, t => t.FieldType); #>);
<#
	}

	if (model.Constructors.Count == 0)
	{
#>
		<#= className #>();
<#	} #>
		virtual ~<#= className #>();

<#
	foreach (PropertyModel property in model.Properties)
	{
#>
		<#= property.Type.ParameterType #> <#= generator.GetGetterName(property) #>() const;
<#
		if (!property.IsReadOnly)
		{
#>
		void <#= generator.GetSetterName(property) #>(<#= property.Type.ParameterType #> value);
<#
		}
	}
#>

<#
	foreach (MethodModel method in model.Delegates)
	{
#>
		delegate<<#= className #>, <#= method.ReturnType.ParameterType #>(<# method.GenerateParameterList(this, options: ParameterListOptions.IncludeTypes); #>)> <#= method.Name #>;
<#
	}
#>

<#
	foreach (MethodModel method in model.Methods)
	{
#>
		<#= method.ReturnType.ParameterType #> <#= method.Name #>(<# method.GenerateParameterList(this); #>);
<#
	}
#>

	protected:
<#
	foreach (MethodModel method in model.Delegates)
	{
#>
		virtual <#= method.ReturnType.ParameterType #> On<#= method.Name #>(<# method.GenerateParameterList(this); #>);
<#
	}
#>

<#
	foreach (PropertyModel property in model.Properties)
	{
		if (property.IsReadOnly)
		{
#>
		void <#= generator.GetSetterName(property) #>(<#= property.Type.ParameterType #> value);
<#
		}
	}
#>

	private:
<#
	foreach (PropertyModel property in model.Properties)
	{
#>
		<#= property.Type.FieldType #> <#= generator.GetFieldName(property) #>;
<#
	}
#>
	};
}